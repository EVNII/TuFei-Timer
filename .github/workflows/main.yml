
name: Executable Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  build:

    strategy:
      matrix:
        os: [windows-latest]
      
    runs-on: ${{ matrix.os }}

    steps:
    
      # Check-out repository
      - uses: actions/checkout@v3

      - name: Create bin directory
        run: mkdir -p bin  # For Unix-based runners
        # For Windows runners, use: run: mkdir bin

      - name: Download FASTSSIM.dll
        run: curl -o bin/ssim.dll https://github.com/chinue/Fast-SSIM/raw/master/ssim.dll

      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
        with:
          # A specific version to download, may also be "release" or a specific version
          # like "6.1.0". At the moment semver specifiers (i.e. >=6.1.0) are supported
          # only on Windows, on other platforms they are allowed but version is matched
          # exactly regardless.
          ffmpeg-version: release
          # Target architecture of the ffmpeg executable to install. Defaults to the
          # system architecture. Only x64 and arm64 are supported (arm64 only on Linux).
          architecture: 'x64'
          # Linking type of the binaries. Use "shared" to download shared binaries and 
          # "static" for statically linked ones. Shared builds are currently only available
          # for windows releases. Defaults to "static"
          github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}
      - run: ls ${{steps.setup-ffmpeg.outputs.ffmpeg-path}}
      
      # Setup Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Build python script into a stand-alone exe
      - uses: Nuitka/Nuitka-Action@main
        with:
          script-name: tufei_timer.py
          access-token: ${{ secrets.NUITKA_COMMERCIAL_ACCESS_TOKEN }}
          onefile: true
          enable-plugins: pyside6
          windows-console-mode: disable
          windows-icon-from-ico: assets/images/logo.png
          output-file: 土肥杯计时器
          include-data-dir: assets=assets
          windows-uac-admin: true
          include-data-files: |
            bin\*.dll=bin\
            ${{steps.setup-ffmpeg.outputs.ffmpeg-path}}\*.exe=bin\

          
      # Uploads artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
            